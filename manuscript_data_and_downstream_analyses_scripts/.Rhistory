LpxA_per_read_meta %>% head
PleD_per_read_meta = merge(Amplicons_PleD_per_read[,c('Sample','read_id.1')],Amplicons_meta[,c('Sample','Site','Ind','Region','Flow','dupl','chunk','DedupInd')], by='Sample', all.x=T)
rownames(PleD_per_read_meta) = PleD_per_read_meta$read_id.1
PleD_per_read_meta$read_id.1 <- NULL
PleD_per_read_meta %>% head
LpxA=as.data.frame(Amplicons_LpxA_per_read[,'haplo'],row.names = row.names(Amplicons_LpxA_per_read))
colnames(LpxA)[1]='haplo'
LpxA %>% head
LpxA_obj <- df2genind(LpxA, ploidy=1,pop=factor(LpxA_per_read_meta$Sample), strata=LpxA_per_read_meta)
PleD=as.data.frame(Amplicons_PleD_per_read[,'haplo'],row.names = row.names(Amplicons_PleD_per_read))
colnames(PleD)[1]='haplo'
PleD %>% head
PleD_obj <- df2genind(PleD, ploidy=1,pop=factor(PleD_per_read_meta$Sample), strata=PleD_per_read_meta)
popsub(PleD_obj)
as.genclone(PleD_obj)
CB_MV=c('R13','R14','R15','R16')
MEF_samples = popNames(LpxA_obj)[!(popNames(LpxA_obj) %>% grepl(paste(CB_MV, collapse="|"),.))]
LpxA.MEF = popsub(LpxA_obj, sublist=MEF_samples)
PleD.MEF = popsub(PleD_obj, sublist=MEF_samples)
LpxA.MEF.amova = poppr.amova(LpxA.MEF,hier=~Flow/Ind/Sample,clonecorrect = FALSE,within=F,threads=4,method='ade4')
randtest(LpxA.MEF.amova, nrepet = 999)
PleD.MEF.amova = poppr.amova(PleD.MEF,hier=~Flow/Ind/Sample,clonecorrect = FALSE,within=F,threads=4,method='ade4')
randtest(PleD.MEF.amova, nrepet = 999)
PleD.MEF.amova
PleD.MEF.amova = poppr.amova(PleD.MEF,hier=~Flow/Ind/chunk/Sample,clonecorrect = FALSE,within=F,threads=4,method='ade4')
PleD.MEF.amova
PleD.MEF.amova = poppr.amova(PleD.MEF,hier=~Flow/Ind/Sample,clonecorrect = FALSE,within=F,threads=4,method='ade4')
PleD.MEF.amova
PleD.MEF.amova$results
variance_partitioning_dbRDA = function(fst,meta){
results=data.frame(level=character(), PropVariance=as.numeric(), Df=numeric(),SumofSquares=numeric(),F=numeric(),pval=numeric())
build_dbRDA_table = function(res){
lev1=as.character(strsplit(as.character(summary(res)$call)[2], " ")[[1]][3])
lev2=as.character(str_extract(as.character(summary(res)$call)[2], "(?<=\\()(.*?)(?=\\))"))
lev=as.character(paste(lev1,"within",lev2))
anova=anova.cca(res, by='terms',permu=1000)
df=anova$Df[1]
ss=anova$SumOfSqs[1]
F_=anova$F[1]
pval=anova$`Pr(>F)`[1]
summary(res)
table=as.data.frame(c(level=lev,
PropVariance=summary(res)$constr.chi/summary(res)$tot.chi,
Df=df,
SumofSquares=ss,
F=F_,
pval=pval)) %>% t(.)
rownames(table)=''
return(table)
}
PleD.MEF.amova
PleD.MEF.amova
quit
)
PleD.MEF.amova
build_results_table <- function(res) {
table=cbind(res$results,res$componentsofcovariance)
return(table)
}
build_results_table(PleD.MEF.amova)
PleD.MEF.amova
fix_phi_df <- function(df){
df1 <- arrange(df, -row_number())
rownames(df1) <- rev(rownames(df))
df1=rbind(df1,data.frame(row.names = 'Total',Phi = NA))
return(df1)
}
build_results_table <- function(res) {
table=cbind(res$results,res$componentsofcovariance,fix_phi_df$res$statphi)
return(table)
}
PleD.MEF.amova$statphi
build_results_table(PleD.MEF.amova)
fix_phi_df <- function(df){
df1 <- arrange(df, -row_number())
rownames(df1) <- rev(rownames(df))
df1=rbind(df1,data.frame(row.names = 'Total',Phi = NA))
return(df1)
}
build_results_table <- function(res) {
table=cbind(res$results,res$componentsofcovariance,fix_phi_df(res$statphi))
return(table)
}
PleD.MEF.amova$statphi
build_results_table(PleD.MEF.amova)
PleD.MEF.amova$statphi
build_results_table <- function(res) {
pval = randtest(res, nrepet =999)
pval = rbind(data.frame(P.value=rev(pval$pvalue),row.names = rev(pval$names)),data.frame(row.names = 'Total',P.value = NA))
table=cbind(res$results,res$componentsofcovariance,fix_phi_df(res$statphi))
return(table)
}
build_results_table <- function(res) {
pval = randtest(res, nrepet =999)
pval = rbind(data.frame(P.value=rev(pval$pvalue),row.names = rev(pval$names)),data.frame(row.names = 'Total',P.value = NA))
table=cbind(res$results,res$componentsofcovariance,fix_phi_df(res$statphi),pval)
return(table)
}
PleD.MEF.amova$statphi
build_results_table(PleD.MEF.amova)
build_results_table(LpxA.MEF.amova)
fix_phi_df <- function(df){
df1 <- arrange(df, -row_number())
rownames(df1) <- rev(rownames(df))
df1=rbind(df1,data.frame(row.names = 'Total',Phi = NA))
return(df1)
}
build_results_table <- function(res) {
pval = randtest(res, nrepet =999)
pval = rbind(data.frame(P.value=rev(pval$pvalue),row.names = rev(pval$names)),data.frame(row.names = 'Total',P.value = NA))
table=cbind(res$results,res$componentsofcovariance,pval,fix_phi_df(res$statphi))
return(table)
}
# randtest(LpxA.MEF.amova, nrepet = 999)
build_results_table(LpxA.MEF.amova)
LpxA.JdF.anova.region = poppr.amova(LpxA_obj,hier=~Region/Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
LpxA.JdF.anova.region
# randtest(LpxA.JdF.anova.region, nrepet = 999)
build_results_table(LpxA.JdF.anova.region)
PleD.JdF.anova.region = poppr.amova(PleD_obj,hier=~Region/Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
PleD.JdF.anova.region
# randtest(PleD.JdF.anova.region, nrepet = 999)
build_results_table(PleD.JdF.anova.region)
LpxA.JdF.anova.flow = poppr.amova(LpxA_obj,hier=~Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
LpxA.JdF.anova.flow
# randtest(LpxA.JdF.anova.flow, nrepet = 999)
build_results_table(LpxA.JdF.anova.flow)
# LpxA.JdF.anova.flow
# randtest(LpxA.JdF.anova.flow, nrepet = 999)
build_results_table(LpxA.JdF.anova.flow)
PleD.JdF.anova.flow = poppr.amova(PleD_obj,hier=~Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
# PleD.JdF.anova.flow
# randtest(PleD.JdF.anova.flow, nrepet = 999)
build_results_table(PleD.JdF.anova.flow)
MV = c('R15','R16')
END_samples = popNames(LpxA_obj)[!(popNames(LpxA_obj) %>% grepl(paste(MV, collapse="|"),.))]
LpxA_END = popsub(LpxA_obj, sublist=END_samples)
PleD_END = popsub(PleD_obj, sublist=END_samples)
LpxA.END.amova.region = poppr.amova(LpxA_END,hier=~Region/Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
LpxA.END.amova.region
randtest(LpxA.END.amova.region, nrepet = 999)
LpxA.END.amova.flow = poppr.amova(LpxA_END,hier=~Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
LpxA.END.amova.flow
randtest(LpxA.END.amova.flow, nrepet = 999)
PleD.END.amova.region = poppr.amova(PleD_END,hier=~Region/Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
PleD.END.amova.region
randtest(PleD.END.amova.region, nrepet = 999)
PleD.END.amova.flow = poppr.amova(PleD_END,hier=~Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
PleD.END.amova.flow
randtest(PleD.END.amova.flow, nrepet = 999)
MV = c('R15','R16')
END_samples = popNames(LpxA_obj)[!(popNames(LpxA_obj) %>% grepl(paste(MV, collapse="|"),.))]
LpxA_END = popsub(LpxA_obj, sublist=END_samples)
PleD_END = popsub(PleD_obj, sublist=END_samples)
LpxA.END.amova.region = poppr.amova(LpxA_END,hier=~Region/Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
# LpxA.END.amova.region
# randtest(LpxA.END.amova.region, nrepet = 999)
build_results_table(LpxA.END.amova.region)
# LpxA.END.amova.region
# randtest(LpxA.END.amova.region, nrepet = 999)
build_results_table(LpxA.END.amova.region)
LpxA.END.amova.flow = poppr.amova(LpxA_END,hier=~Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
# LpxA.END.amova.flow
# randtest(LpxA.END.amova.flow, nrepet = 999)
build_results_table(LpxA.END.amova.flow)
PleD.END.amova.region = poppr.amova(PleD_END,hier=~Region/Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
# PleD.END.amova.region
# randtest(PleD.END.amova.region, nrepet = 999)
build_results_table(PleD.END.amova.region)
PleD.END.amova.flow = poppr.amova(PleD_END,hier=~Flow/DedupInd,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4')
# PleD.END.amova.flow
# randtest(PleD.END.amova.flow, nrepet = 999)
build_results_table(PleD.END.amova.flow)
setwd('~/Desktop/CRISPR_R/')
knitr::opts_chunk$set(echo = TRUE)
# install.packages("pegas")
# require(ape)
require(dplyr)
require(reshape2)
library('ggplot2')
require('ade4')
require('usedist')
setwd('/Users/maeva/Desktop/CRISPR_R/')
setwd('~/Desktop/CRISPR_R/')
setwd('~/Users/maeperez/Desktop/Rdownstream_analyses/')
knitr::opts_chunk$set(echo = TRUE)
# install.packages("pegas")
# require(ape)
require(dplyr)
require(reshape2)
library('ggplot2')
require('ade4')
require('usedist')
setwd('~/Users/maeperez/Desktop/Rdownstream_analyses/')
knitr::opts_chunk$set(echo = TRUE)
# install.packages("pegas")
# require(ape)
require(dplyr)
require(reshape2)
library('ggplot2')
require('ade4')
require('usedist')
# Import data
## import and format Fst matrices
```{r import pairwise Phi-ST matrices}
## CRISPR
crispr <- read.table('CRISPR_Arlequin_Phi-st.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
# crispr[lower.tri(crispr, diag = FALSE)]
crispr %>% head
## LpxA
LpxA <- read.table('Arlequin_LpxA_Phi-st.txt',header=T,row.names = 1,sep='\t')
crispr[lower.tri(crispr, diag = FALSE)]
# crispr[lower.tri(crispr, diag = FALSE)]
crispr %>% head
## CRISPR
crispr <- read.table('CRISPR_Arlequin_Phi-st.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
# crispr[lower.tri(crispr, diag = FALSE)]
crispr %>% head
as.dist(crispr)
write.table(as.dist(crispr),'CRISPR_Arlequin_Phi-st_lower.txt')
write.csv(as.dist(crispr),'CRISPR_Arlequin_Phi-st_lower.txt')
x<- crispr
x[upper.tri(x)] <- NA
write.table(x, 'CRISPR_Arlequin_Phi-st_lower.txt',na="", row.names=FALSE, col.names=FALSE)
setwd('~/Users/maeperez/Desktop/Rdownstream_analyses/')
## CRISPR
crispr <- read.table('CRISPR_Arlequin_Phi-st.txt',header=T,row.names=1,sep='\t')
setwd("~/Desktop/Rdownstream_analyses")
## CRISPR
crispr <- read.table('CRISPR_Arlequin_Phi-st.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
# crispr[lower.tri(crispr, diag = FALSE)]
crispr %>% head
## CRISPR
crispr <- read.table('Arlequin_CRISPR_Phi-st.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
# crispr[lower.tri(crispr, diag = FALSE)]
crispr %>% head
x<- crispr
x[upper.tri(x)] <- NA
write.table(x, 'CRISPR_Arlequin_Phi-st_lower.txt',na="", row.names=FALSE, col.names=FALSE)
write.table(x, 'CRISPR_Arlequin_Phi-st_lower.txt',na="", row.names=TRUE, col.names=T)
## LpxA
LpxA <- read.table('Arlequin_LpxA_Phi-st.txt',header=T,row.names = 1,sep='\t')
colnames(LpxA)=rownames(LpxA)
LpxA = as.matrix(LpxA)
LpxA = Matrix::forceSymmetric(LpxA,uplo="L") %>% as.matrix(.)
LpxA = LpxA[sort(rownames(LpxA)),sort(rownames(LpxA))]
LpxA %>% head
## PleD
PleD <- read.table('Arlequin_PleD_Phi-st.txt',header=T,row.names = 1,sep='\t')
colnames(PleD)=rownames(PleD)
PleD = as.matrix(PleD)
PleD = Matrix::forceSymmetric(PleD,uplo="L") %>% as.matrix(.)
PleD = PleD[sort(rownames(PleD)),sort(rownames(PleD))]
PleD %>% head
```
## subset Fst matrices to common samples
```{r subset matrices}
rownames(crispr)
rownames(LpxA)
core_samples = intersect(rownames(crispr),rownames(LpxA))
crispr.dist = dist_subset(crispr,core_samples)
LpxA.dist = dist_subset(LpxA,core_samples)
PleD.dist = dist_subset(PleD,core_samples)
length(crispr.dist)
length(LpxA.dist)
length(PleD.dist)
length(crispr.dist)
length(LpxA.dist)
length(PleD.dist)
length(crispr.dist)
length(LpxA.dist)
length(PleD.dist)
```
# Run mantel test
```{r}
plot(crispr.dist,LpxA.dist)
library(ggpmisc)
my.formula <- y ~ x
ggplot(dat=as.data.frame(cbind(crispr.dist,PleD.dist)),aes(x=crispr.dist, y=PleD.dist))+
geom_point()+
geom_smooth(method='lm')+
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
# How likely is it that CRISPR distances and LpxA distances are unrelated?
mantel.rtest(crispr.dist, LpxA.dist, nrepet = 9999)
plot(crispr.dist,PleD.dist)
# How likely is it that CRISPR distances and PleD distances are unrelated?
mantel.rtest(crispr.dist, PleD.dist, nrepet = 9999)
# How likely is it that LpxA distances and PleD distances are unrelated?
mantel.rtest(LpxA.dist, PleD.dist, nrepet = 9999)
setwd('./')
wd
setwd('./')
knitr::opts_chunk$set(echo = TRUE)
# install.packages("pegas")
# require(ape)
require(dplyr)
require(reshape2)
library('ggplot2')
require('ade4')
require('usedist')
## CRISPR
crispr <- read.table('Arlequin_CRISPR_Phi-st.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
# crispr[lower.tri(crispr, diag = FALSE)]
crispr %>% head
#### Import Amplicons allele counts in populations ####
path_to_Amplicons_allele_counts_in_pop = '/Users/maeperez/OneDrive - Universite de Montreal/CRISPR_ms/CRISPR_R/Amplicons_haplotypes_all.txt'
Amplicons_all = read.table(path_to_Amplicons_allele_counts_in_pop,header=TRUE,sep='\t')
colnames(Amplicons_all) = c('Sample', colnames(Amplicons_all) %>% gsub('\\.','-',.) %>% .[2:length(.)])
Amplicons_all[is.na(Amplicons_all)] <- 0
rownames(Amplicons_all) = as.character(Amplicons_all$Sample) %>% substr(., 13, nchar(.))
Amplicons_all %>% head
#### Import Amplicons allele counts in populations ####
path_to_Amplicons_allele_counts_in_pop = './Amplicons_haplotypes_all.txt'
Amplicons_all = read.table(path_to_Amplicons_allele_counts_in_pop,header=TRUE,sep='\t')
#### Import Amplicons allele counts in populations ####
path_to_Amplicons_allele_counts_in_pop = 'Amplicons_haplotypes_all.txt'
Amplicons_all = read.table(path_to_Amplicons_allele_counts_in_pop,header=TRUE,sep='\t')
setwd('./')
#### Import Amplicons allele counts in populations ####
path_to_Amplicons_allele_counts_in_pop = 'Amplicons_haplotypes_all.txt'
Amplicons_all = read.table(path_to_Amplicons_allele_counts_in_pop,header=TRUE,sep='\t')
#### Import Amplicons allele counts in populations ####
path_to_Amplicons_allele_counts_in_pop = './Amplicons_haplotypes_all.txt'
Amplicons_all = read.table(path_to_Amplicons_allele_counts_in_pop,header=TRUE,sep='\t')
setwd('./')
setwd("~/Desktop/CRISPR_distance/manuscript_data")
etwd("~/Desktop/CRISPR_distance/manuscript_data")
setwd("~/Desktop/CRISPR_distance/manuscript_data")
#### Import Amplicons allele counts in populations ####
path_to_Amplicons_allele_counts_in_pop = './Amplicons_haplotypes_all.txt'
Amplicons_all = read.table(path_to_Amplicons_allele_counts_in_pop,header=TRUE,sep='\t')
colnames(Amplicons_all) = c('Sample', colnames(Amplicons_all) %>% gsub('\\.','-',.) %>% .[2:length(.)])
Amplicons_all[is.na(Amplicons_all)] <- 0
rownames(Amplicons_all) = as.character(Amplicons_all$Sample) %>% substr(., 13, nchar(.))
Amplicons_all %>% head
### Import metdata ###
path_to_Amplicons_metadata = '~/Dropbox/CRISPR_haplo/Amplicons_metadata.txt'
path_to_LpxA_per_read_allele_counts_in_pop = './LpxA_per_read.txt'
path_to_PleD_per_read_allele_counts_in_pop = './PleD_per_read.txt'
Amplicons_LpxA_per_read <- read.table(path_to_LpxA_per_read_allele_counts_in_pop,header=T,row.names = 1,sep='\t')
Amplicons_LpxA_per_read
## LpxA
LpxA <- read.table('./Amplicons_LpxA_pairwiseFst.txt',header=T,row.names = 1,sep='\t')
colnames(LpxA)=rownames(LpxA)
LpxA = as.matrix(LpxA)
LpxA = Matrix::forceSymmetric(LpxA,uplo="L") %>% as.matrix(.)
LpxA = LpxA[sort(rownames(LpxA)),sort(rownames(LpxA))]
LpxA %>% head
## PleD
PleD <- read.table('./Amplicons_PleD_pairwiseFst.txt',header=T,row.names = 1,sep='\t')
colnames(PleD)=rownames(PleD)
PleD = as.matrix(PleD)
PleD = Matrix::forceSymmetric(PleD,uplo="L") %>% as.matrix(.)
PleD = PleD[sort(rownames(PleD)),sort(rownames(PleD))]
PleD %>% head
## CRISPR
crispr <- read.table('./CRISPR_pairwisePhist.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
# crispr[lower.tri(crispr, diag = FALSE)]
crispr %>% head
## CRISPR
crispr <- read.table('./CRISPR_pairwisePhist.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
## CRISPR
crispr <- read.table('./CRISPR_pairwisePhist.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr
## CRISPR
crispr <- read.table('./CRISPR_pairwisePhist.txt',header=T,row.names=1,sep='\s')
## CRISPR
crispr <- read.table('./CRISPR_pairwisePhist.txt',header=T,row.names=1,sep=' ')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
crispr = Matrix::forceSymmetric(crispr,uplo="L") %>% as.matrix(.)
crispr = crispr[sort(rownames(crispr)),sort(rownames(crispr))]
crispr %>% head
## CRISPR
crispr <- read.table('./CRISPR_pairwisePhist.txt',header=T,row.names=1,sep='\t')
colnames(crispr)=rownames(crispr)
crispr = as.matrix(crispr)
crispr = Matrix::forceSymmetric(crispr,uplo="L") %>% as.matrix(.)
crispr = crispr[sort(rownames(crispr)),sort(rownames(crispr))]
crispr %>% head
path_to_LpxA_Phist_matrix = './Amplicons_LpxA_pairwiseFst.txt'
path_to_PleD_Phist_matrix = './Amplicons_PleD_pairwiseFst.txt'
LpxA_phist=read.csv(path_to_LpxA_Phist_matrix,header=T,row.names = 1,sep='\t')
colnames(LpxA_phist) = c(colnames(LpxA_phist) %>% gsub('\\.','-',.) %>% .[1:length(.)])
LpxA_phist=as.dist(as.matrix(LpxA_phist))
LpxA_phist=dist_subset(LpxA_phist,idx=sort(labels(LpxA_phist)))
LpxA_phist_nomv=dist_subset(LpxA_phist,idx = END_samples)
PleD_phist=read.csv(path_to_PleD_Phist_matrix,header=T,row.names = 1,sep='\t')
colnames(PleD_phist) = c(colnames(PleD_phist) %>% gsub('\\.','-',.) %>% .[1:length(.)])
PleD_phist=as.dist(as.matrix(PleD_phist))
PleD_phist=dist_subset(PleD_phist,idx=sort(labels(PleD_phist)))
PleD_phist_nomv=dist_subset(PleD_phist,idx = END_samples)
#### Amplicons ####
LpxA_dupl1=Amplicons_all[c("R13L-5-T","R13L-5-T_bis"),2:5]
LpxA_dupl1_nozero=LpxA_dupl1[rowSums(LpxA_dupl1)>0,]
fisher.test(LpxA_dupl1)
diversity(t(LpxA_dupl1))  %>% mean(.)
LpxA_dupl2=Amplicons_all[c("R15H-3-T","R15H-3-T_old"),2:5]
LpxA_dupl2_nozero=LpxA_dupl2[rowSums(LpxA_dupl2)>0,]
fisher.test(LpxA_dupl2)
diversity(t(LpxA_dupl2))  %>% mean(.)
setwd("~/Desktop/CRISPR_distance/manuscript_data")
knitr::opts_chunk$set(echo = TRUE)
require('dplyr')
require('reshape2')
library('ggplot2')
require('ade4')
require('usedist') # package used to subset distance matrix
require('poppr')
require('vegan')
require('ape')
diversity(t(PleD_dupl2))  %>% mean(.)
setwd("~/Desktop/CRISPR_distance/manuscript_data")
knitr::opts_chunk$set(echo = TRUE)
require('dplyr')
require('reshape2')
library('ggplot2')
require('ade4')
require('usedist') # package used to subset distance matrix
require('poppr')
require('vegan')
require('ape')
#### Import CRISPR Array distance matrix issued from Kupczok and Bollback (2013) algorithm ####
path_to_CRISPR_arrays_distance_matrix = './CRISPRarrays_estimated_pairwiseDist.csv'
crispr_dist_all = read.csv(path_to_CRISPR_arrays_distance_matrix,header=T,row.names = 1,sep='\t')
colnames(crispr_dist_all)=c(0,rownames(crispr_dist_all)[-10])
tail(crispr_dist_all)
crispr_dist_all<-as.dist(crispr_dist_all)
attr(crispr_dist_all,'Labels')
crispr_dist_main<-dist_subset(crispr_dist_all, c(1:10)) # 10 main CRISPR haplotypes (haplotypes present in more than 5% of reads in at least one sample)
path_to_Phist_matrix = './CRISPR_pairwisePhist.txt'
phist=read.csv(path_to_Phist_matrix,header=T,row.names = 1,sep='\t')
colnames(phist) = c(colnames(phist) %>% gsub('\\.','-',.) %>% .[1:length(.)])
phist=phist[order(rownames(phist)), order(colnames(phist))]
phist=as.dist(as.matrix(phist))
str(phist)
MV = c('R15','R16')
END_samples = labels(phist)[!(labels(phist) %>% grepl(paste(MV, collapse="|"),.))]
phist_nomv=dist_subset(phist,idx = END_samples)
#### CRISPR ####
dupl1=crispr_all[,c("R02H-8-T_bis","R02H-8-T")]
dupl1_nozero=dupl1[rowSums(dupl1)>0,]
chisq.test(dupl1_nozero)
fisher.test(dupl1)
diversity(t(dupl1),'simpson')  %>% mean(.)
diversity(t(dupl1))  %>% mean(.)
dupl2=crispr_all[,c("R15H-2-T_bis","R15H-2-T")]
dupl2_nozero=dupl2[rowSums(dupl2)>0,]
chisq.test(dupl2_nozero)
fisher.test(dupl2)
diversity(t(dupl2),'simpson') %>% mean(.)
diversity(t(dupl2))  %>% mean(.)
dupl3=crispr_all[,c("R15H-3-T_old","R15H-3-T")]
dupl3_nozero=dupl3[rowSums(dupl3)>0,]
chisq.test(dupl3_nozero)
fisher.test(dupl3)
diversity(t(dupl3),'simpson')
diversity(t(dupl3))  %>% mean(.)
meta$DedupInd<-ifelse(meta$Sample == 'R02H-8-T_bis','R02H-8-T_bis',meta$Ind)
head(meta)
df %>% head
meta %>% head
per_read_meta = merge(df[,c('Sample','read_id.1')],meta[,c('Sample','Site','Ind','Region','Flow','dupl','chunk','DedupInd')], by='Sample', all.x=T)
rownames(per_read_meta) = per_read_meta$read_id.1
per_read_meta$read_id.1 <- NULL
per_read_meta %>% head
df1=as.data.frame(df[,'haplo'],row.names = row.names(df))
colnames(df1)[1]='haplo'
df1 %>% head
obj <- df2genind(df1, ploidy=1,pop=factor(per_read_meta$Sample), strata=per_read_meta)
popsub(obj)
as.genclone(obj)
CB_MV=c('R13','R14','R15','R16')
MEF_samples = popNames(obj)[!(popNames(obj) %>% grepl(paste(CB_MV, collapse="|"),.))]
MEF = popsub(obj, sublist=MEF_samples)
MEF.amova = poppr.amova(MEF,hier=~Flow/Site/Ind/chunk/Sample,clonecorrect = FALSE,within=TRUE,threads=4,method='ade4',dist=dist_subset(crispr_dist_all,idx = MEF@all.names$haplo),squared=F,correction='lingoes')
MEF.amova
randtest(MEF.amova, nrepet = 999)
# ## converting a genind as data.frame
# genind2df(obj)
# genind2df(obj, sep="/")
fix_phi_df <- function(df){
df1 <- arrange(df, -row_number())
rownames(df1) <- rev(rownames(df))
df1=rbind(df1,data.frame(row.names = 'Total',Phi = NA))
return(df1)
}
build_results_table <- function(res) {
pval = randtest(res, nrepet =999)
pval = rbind(data.frame(P.value=rev(pval$pvalue),row.names = rev(pval$names)),data.frame(row.names = 'Total',P.value = NA))
table=cbind(res$results,res$componentsofcovariance,pval,fix_phi_df(res$statphi))
return(table)
}
# MEF.amova
# randtest(MEF.amova, nrepet = 999)
build_results_table(MEF.amova)
